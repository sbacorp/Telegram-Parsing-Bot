import { Conversation, Context } from "../types/index.ts";

let hui = false;
export async function cbazar(conversation: Conversation, ctx: Context) {
  await ctx.reply(
		"<b>üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n\nüìÉ <b>–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞</b>\n\n –ü—Ä–∏–º–µ—Ä : 10",
		{ parse_mode: "HTML" }
	);
	while (!hui) {
		const ok = await waitForNumber(conversation, ctx);
		if (ok) {
			await ctx.reply("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ");
			hui = true;
      return;
		} else {
			await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ");
		}
	}
}

async function waitForNumber(conversation: Conversation, ctx: Context) {
	const countMaxAds = await conversation.wait();
	const prov = parseInt(countMaxAds.message.text);
	console.log(prov);

	//  if (prov.valueOf()===NaN){
	//   await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ");
	//   const newConst =await conversation.wait();
	//  }
	//  else {
	//   await ctx.reply("–í—Å–µ —á–µ—Ç–∫–æ" )
	//  }
	return !Number.isNaN(prov.valueOf());
}
