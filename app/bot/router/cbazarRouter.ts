import { Router } from "https://deno.land/x/grammy_router@v2.0.0/router.ts";
import { Context } from "../types/index.ts";

export const router = new Router<Context>((ctx) => ctx.session.sbazarStep);


const countMaxAds = router.route("countMaxAds");
countMaxAds.on("message:text", async (ctx) => {
  const countMaxAds = parseInt(ctx.msg.text);
  if (isNaN(countMaxAds) || countMaxAds < 1) {
    await ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!");
    return;
  }
  ctx.session.countMaxAds = countMaxAds;
  ctx.session.sbazarStep = "registrationDate";
  await ctx.reply("–ì–æ—Ç–æ–≤–æ");
  await ctx.reply("<b>üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n\nüìÉ <b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞</b>\n\n –ü—Ä–∏–º–µ—Ä : 2020")
  ctx.session.sbazarStep = "registrationDate";
});
const registrationDate = router.route("registrationDate");
registrationDate.on("message:text", async (ctx) => {
  const countMaxAds = ctx.session.countMaxAds;
  if (countMaxAds === undefined) {
    await ctx.reply("–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
    ctx.session.sbazarStep = "countMaxAds";
    return;
  }

  const registrationDate = parseInt(ctx.msg.text);
  if (isNaN(registrationDate) || registrationDate >2022 ||registrationDate <2000 ) {
    await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥\n –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
    return;
  }
  ctx.session.registrationDate = registrationDate;
  await ctx.reply("–ì–æ—Ç–æ–≤–æ");
  await ctx.reply("<b>üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n\nüìÉ <b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞</b>\n\n –ü—Ä–∏–º–µ—Ä : 11-11-2022")
  ctx.session.sbazarStep = "publishDate";
});

const publishDate = router.route("publishDate");
publishDate.on("message:text", async (ctx) => {
  const registrationDate = ctx.session.registrationDate;

  if (registrationDate === undefined) {
    await ctx.reply("–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
    ctx.session.sbazarStep = "registrationDate";
    return;
  }

  const publishDate = parseInt(ctx.msg.text);
  console.log(publishDate);
  
  if (isNaN(registrationDate) || publishDate ===2) {
    await ctx.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞\n –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
    return;
  }
  ctx.session.publishDate = publishDate;
  await ctx.reply(`<b>üîé –§–∏–ª—å—Ç—Ä—ã:</b>\n\n\nüìÉ–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${ctx.session.countMaxAds}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${ctx.session.registrationDate}\nüïú –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:  ${ctx.session.publishDate}\n\n\n`)
  ctx.session.sbazarStep = "idle";
});
router.otherwise(async (ctx) =>  ctx.answerCallbackQuery('–û—à–∏–±–∫–∞'));
