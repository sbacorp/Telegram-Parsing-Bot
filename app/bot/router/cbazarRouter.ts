import { Router } from "https://deno.land/x/grammy_router@v2.0.0/router.ts";
import { parse } from "../../server/parsers/cbazar.ts";
import { cancel } from "../keyboards/index.ts";
import { Context } from "../types/index.ts";

export const router = new Router<Context>((ctx) => ctx.session.sbazarStep);

const countMaxAds = router.route("countMaxAds");
countMaxAds.on("message:text", async (ctx) => {
  if (ctx.msg.text==='–æ—Ç–º–µ–Ω–∞') {
    await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
    ctx.session.sbazarStep = "idle";
    return;
  }
	const countMaxAds = parseInt(ctx.msg.text);
	if (isNaN(countMaxAds) || countMaxAds < 1) {
		await ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
		return;
	}
	ctx.session.countMaxAds = countMaxAds;
	
	await ctx.reply("*–ì–æ—Ç–æ–≤–æ*");
	await ctx.reply(
		"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞*\n\n –ü—Ä–∏–º–µ—Ä : 2020"
	);
	ctx.session.sbazarStep = "registrationDate";
});

countMaxAds.use(async (ctx) => await ctx.reply({ reply_markup: cancel }));
const registrationDate = router.route("registrationDate");

registrationDate.on("message:text", async (ctx) => {
	const countMaxAds = ctx.session.countMaxAds;
	if (countMaxAds === undefined) {
		await ctx.reply("–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
		ctx.session.sbazarStep = "countMaxAds";
		return;
	}

	const registrationDate = parseInt(ctx.msg.text);
	if (
		isNaN(registrationDate) ||
		registrationDate > 2022 ||
		registrationDate < 2000
	) {
		await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥\n –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
		return;
	}
	ctx.session.registrationDate = registrationDate;
	await ctx.reply("–ì–æ—Ç–æ–≤–æ");
	await ctx.reply(
		"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ `–¥–Ω–µ–π –Ω–∞–∑–∞–¥`*\n\n –ü—Ä–∏–º–µ—Ä : 3" 
	);
	ctx.session.sbazarStep = "publishDate";
});

const publishDate = router.route("publishDate");

publishDate.on("message:text", async (ctx) => {
	const registrationDate = ctx.session.registrationDate;
	if (registrationDate === undefined) {
		await ctx.reply("–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
		ctx.session.sbazarStep = "registrationDate";
		return;
	}
	const publishDate = parseInt(ctx.msg.text);
	if (isNaN(publishDate) || publishDate < 1) {
		await ctx.reply("*–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É\!*");
		return;
	}
	ctx.session.publishDate = publishDate;
	await ctx.reply(
		`*–§–∏–ª—å—Ç—Ä—ã:*\n\n\nüìÉ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${ctx.session.countMaxAds}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${ctx.session.registrationDate}\nüïú –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:  ${ctx.session.publishDate}\nüì§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–¥–∞—á–∏: ${ctx.session.countOutput}`
	);
	const values = { productsCount: Number(ctx.session.countMaxAds), daysAgo: Number(ctx.session.publishDate), year: 2022-Number(ctx.session.registrationDate), count: ctx.session.countOutput};
	await parse(ctx, values);
	ctx.session.sbazarStep = "idle";
});
router.otherwise(async (ctx) => ctx.answerCallbackQuery("–û—à–∏–±–∫–∞"));
