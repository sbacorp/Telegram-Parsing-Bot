import { Router } from "https://deno.land/x/grammy_router@v2.0.0/router.ts";
import { parse } from "../../server/parsers/cbazar.ts";
import { allowedCategories } from "../headers.ts";
import { cancel,mainMenu,BeginParse} from "../keyboards/index.ts";
import { Context } from "../types/index.ts";
import {UserModel} from "../../server/models.ts"
export const router = new Router<Context>((ctx) => ctx.session.sbazarStep);
const promo = router.route("promo");

promo.on("message:text", async (ctx:Context) => {  
  if (ctx.msg.text==='–æ—Ç–º–µ–Ω–∞') {
    await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
	await ctx.reply(" –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ",{reply_markup:mainMenu });
	ctx.session.sbazarStep = "idle";
    return;
  }
  if (ctx.msg.text==='promo1') {
		try {
			const chatId = ctx.chat.id.toString();
			const user = await UserModel.findOne({where:{chatId:chatId}})
			user.userBalance +=10;
			user.save();
		} catch (e) {
			console.log(e);
			ctx.replyWithHTML(e)
		}
		ctx.reply('*–£—Å–ø–µ—à–Ω–æ*', {reply_markup:mainMenu});
	ctx.session.sbazarStep = "idle";
    return;
  }

});

const sub = router.route("sub");
sub.on("message:text", async (ctx) => {
  if (ctx.msg.text==='–æ—Ç–º–µ–Ω–∞') {
    await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
	await ctx.reply(" –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ",{reply_markup:mainMenu });
	ctx.session.sbazarStep = "idle";
    return;
  }
});
const countMaxAds = router.route("countMaxAds");
countMaxAds.on("message:text", async (ctx:Context) => {
	/**
	 * !–ø–µ—Ä–≤–∞—è –æ–º—Ç–µ–Ω–∞ 
	 */
  if (ctx.msg.text==='–æ—Ç–º–µ–Ω–∞') {
    await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
	await ctx.reply(" –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ",{reply_markup:mainMenu });  
	ctx.session.sbazarStep = "idle";
    return;
  }
	const countMaxAds = parseInt(ctx.msg.text);
	if (isNaN(countMaxAds) || countMaxAds < 1) {
		await ctx.reply("–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
		return;
	}
	ctx.session.countMaxAds = countMaxAds;
	
	await ctx.reply("*–ì–æ—Ç–æ–≤–æ*");
	await ctx.reply(
		"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞*\n\n –ü—Ä–∏–º–µ—Ä : 2020",
		{ reply_markup: cancel }
	);
	ctx.session.sbazarStep = "registrationDate";
});

 countMaxAds.use(async (ctx:Context) => await ctx.reply({ reply_markup: cancel }));

const registrationDate = router.route("registrationDate");

registrationDate.on("message:text", async (ctx:Context) => {
	const countMaxAds = ctx.session.countMaxAds;
	if (countMaxAds === undefined) {
		await ctx.reply("–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
		ctx.session.sbazarStep = "countMaxAds";
		return;
    }
/**
 * !–≤—Ç–æ–∞—Ä—è –æ–º—Ç–µ–Ω–∞ 
 */
	if(ctx.msg.text==='–æ—Ç–º–µ–Ω–∞'){
		await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
		await ctx.reply(
			"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞*\n\n –ü—Ä–∏–º–µ—Ä : 10");
        ctx.session.sbazarStep = "countMaxAds";
        return;
	}

	const registrationDate = parseInt(ctx.msg.text);
	if (
		isNaN(registrationDate) ||
		registrationDate > 2022 ||
		registrationDate < 2000
	) {
		await ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥\n –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
		return;
	}
	
	ctx.session.registrationDate = registrationDate;
	await ctx.reply("–ì–æ—Ç–æ–≤–æ");
	await ctx.reply(
		"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ `–¥–Ω–µ–π –Ω–∞–∑–∞–¥`*\n\n –ü—Ä–∏–º–µ—Ä : 3",
		{ reply_markup: cancel }	 
	);
	ctx.session.sbazarStep = "publishDate";
});

const publishDate = router.route("publishDate");
publishDate.on("message:text", async (ctx:Context) => {
	const registrationDate = ctx.session.registrationDate;
	if (registrationDate === undefined) {
		await ctx.reply("–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
		ctx.session.sbazarStep = "registrationDate";
		return;
	}
	/**
    * !—Ç—Ä–µ—Ç—å—è –æ–º—Ç–µ–Ω–∞ 
    */
	 if ( ctx.msg.text ==='–æ—Ç–º–µ–Ω–∞'){
		await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
		await ctx.reply(
			"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞*\n\n –ü—Ä–∏–º–µ—Ä : 2020");
        ctx.session.sbazarStep = "registrationDate";
        return;
	}
	

	const publishDate = parseInt(ctx.msg.text);
	if (isNaN(publishDate) || publishDate < 1) {
		await ctx.reply("*–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*");
		return;
	}

	ctx.session.publishDate = publishDate;
	await ctx.reply("–ì–æ—Ç–æ–≤–æ");
	await ctx.replyWithHTML(
		"<b>üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>\n\nüìÉ <b>–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–º–µ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n –ü—Ä–∏–º–µ—Ä : https://wwwsbazarcz/30-elektro-pocitace => –Ω–æ–º–µ—Ä 30",
		{ reply_markup: cancel }	 
	);
	ctx.session.sbazarStep = "getUrls";
	
});



const getUrls = router.route("getUrls");
getUrls.on("message:text", async (ctx:Context) => {
	const publishDate = ctx.session.publishDate;
	if (publishDate === undefined) {
		await ctx.reply("–ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
		ctx.session.sbazarStep = "publishDate";
		return;
	}
	/**
    * !—á–µ—Ç–≤–µ—Ä—Ç–∞—è –æ–º—Ç–µ–Ω–∞
    */
	 if ( ctx.msg.text ==='–æ—Ç–º–µ–Ω–∞'){
		await ctx.reply(`–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
		await ctx.reply(
			"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ `–¥–Ω–µ–π –Ω–∞–∑–∞–¥`*\n\n –ü—Ä–∏–º–µ—Ä : 3");
		ctx.session.sbazarStep = "publishDate";
		return;
	}
	const urls = ctx.msg.text.split(',')
		for ( var i=0;i <urls.length;i++ ){
			console.log(urls[i]);
			 const found =allowedCategories.includes(urls[i])
			if (found){
				console.log("–í—Å–µ –∑–∞–µ–±–∏—Å—å");
			}
			else {
				console.log("eror");
				await ctx.reply("*–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É*");
				return;
			}
		};
		ctx.session.urls = urls;
		
		await ctx.reply(
		`*–§–∏–ª—å—Ç—Ä—ã:*\n\n\nüìÉ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${ctx.session.countMaxAds}\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${ctx.session.registrationDate}\nüïú –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:  ${ctx.session.publishDate}\nüì§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–¥–∞—á–∏: ${ctx.session.countOutput}\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: :${ctx.session.urls}`,{ reply_markup: BeginParse }
	);
	
	ctx.session.sbazarStep = "startingSbazar";
	
});

const startingSbazar = router.route("startingSbazar");
startingSbazar.on("message:text", async (ctx:Context) => {
if (ctx.msg.text==='–ù–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥'){
	const values = { productsCount: Number(ctx.session.countMaxAds), daysAgo: Number(ctx.session.publishDate), year: 2022-Number(ctx.session.registrationDate), count: ctx.session.countOutput};
	await parse(ctx, values, ctx.session.urls);
}
	if (ctx.msg.text ==='–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'){
			await ctx.reply(
				"*üîé –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\nüìÉ *–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É –ø—Ä–æ–¥–∞–≤—Ü–∞*\n\n –ü—Ä–∏–º–µ—Ä : 10",
			{ reply_markup: cancel }	 
		);
		ctx.session.sbazarStep = "countMaxAds";
		return;
	}
});


router.otherwise(async (ctx) => ctx.answerCallbackQuery("–û—à–∏–±–∫–∞"));
